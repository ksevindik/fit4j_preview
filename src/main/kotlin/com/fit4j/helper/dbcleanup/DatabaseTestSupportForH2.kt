package com.fit4j.helper.dbcleanup

import org.springframework.jdbc.core.JdbcTemplate

class DatabaseTestSupportForH2 : AbstractDatabaseTestSupport() {
    override fun executeResetAllIdentifiers(jdbcTemplate: JdbcTemplate, schemaName: String) {
        val allTableNames =
            jdbcTemplate.queryForList(
                "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$schemaName'",
                String::class.java
            )
        val tableNamesWhichEmployNextValMechanism =
            jdbcTemplate.queryForList(
                "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.COLUMNS WHERE COLUMN_DEFAULT LIKE '%NEXT VALUE FOR%'",
                String::class.java
            )
        val excludedTables =
            jdbcTemplate.queryForList(
                """
            SELECT tc.table_name
            FROM information_schema.table_constraints tc
            JOIN information_schema.key_column_usage kcu
              ON tc.constraint_name = kcu.constraint_name
              AND tc.table_schema = kcu.table_schema
              AND tc.table_name = kcu.table_name
            WHERE tc.constraint_type = 'PRIMARY KEY'
              AND kcu.column_name <> 'ID'
        """
                    .trimIndent(),
                String::class.java
            )
        allTableNames
            .filter { !excludedTables.contains(it) }
            .forEach {
                if (!tableNamesWhichEmployNextValMechanism.contains(it)) {
                    jdbcTemplate.execute(
                        "ALTER TABLE IF EXISTS `$it` ADD `NEW_ID` BIGINT GENERATED BY DEFAULT AS IDENTITY"
                    )
                    jdbcTemplate.execute("ALTER TABLE IF EXISTS `$it` DROP COLUMN ID")
                    jdbcTemplate.execute(
                        "ALTER TABLE IF EXISTS `$it` ALTER COLUMN NEW_ID RENAME TO ID"
                    )
                }
            }

        tableNamesWhichEmployNextValMechanism.forEach {
            jdbcTemplate.execute("ALTER TABLE $it ALTER COLUMN ID RESTART WITH 1")
        }
    }

    override fun executeClearAllTables(jdbcTemplate: JdbcTemplate, schemaName: String) {
        jdbcTemplate.execute("SET REFERENTIAL_INTEGRITY FALSE")
        val tableNames =
            jdbcTemplate.queryForList(
                "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '$schemaName'",
                String::class.java,
            )
        tableNames.forEach { tableName ->
            jdbcTemplate.execute(
                """
                    TRUNCATE TABLE "$tableName"
                """
                    .trimIndent()
            )
        }
        jdbcTemplate.execute("SET REFERENTIAL_INTEGRITY TRUE")
    }

    override fun schemaName(): String {
        return "PUBLIC"
    }
}
